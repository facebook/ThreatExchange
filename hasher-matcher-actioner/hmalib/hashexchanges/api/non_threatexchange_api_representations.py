# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved

"""
Typed representations (dataclasses only) for interfacing with the
API classes.
"""

from datetime import datetime
from dataclasses import dataclass
import typing as t


@dataclass
class CSPFeedback:
    """
    CSPFeedback has the following properties:

        source: Indicates the source from which the feedback was recorded.

        feedbackValue: Value of the feedback provided the CSP. Only CSPs can provide feedbacks.
        The information is returned in a string format instead of a numerical, for easy understanding.
        valid values for feedbackValue are (each of them are in string format):
            None,
            QualityUnknown,
            PendingReview,
            Blocked,
            NotBlocked,
            Withdrawn,
            Deleted,
            Unknown

        tags: A List of strings, in free format, provided by the CSP, who recorded the feedback.
    """

    source: str
    feedbackValue: str
    tags: t.List[str]

    @classmethod
    def from_dict(cls, d: dict) -> "CSPFeedback":
        return cls(
            d.get("source", None),
            d.get("feedbackValue", None),
            d.get("tags", []),
        )


@dataclass
class HashRecord:
    """
    Properties of a hashRecord are:

        lastModtimestamp: timestamp in Unix Epoch time, indicating when the record was last modified.

        hashValue: Hash value as generated by the specific algorithm, such as PDQ, TMK, MD5 etc.

        hashStatus: Indicates the overall status of the hashRecord that can be readily used by the caller.

        caseNumbers: Is an array of Key-Value Pair, with Key indicating the Case Id in GUID/UUID format and value is the CaseStatus(
            Unknown = 0
            Received = 1,
            Active = 2,
            Withdrawn = 8192,
            Deleted = 16384).

        signalType: Indicates the type of file and the hashing method used. Valid values for signalType are:
            Unknown = 0,
            ImagePDQ = 1,
            VideoTMK = 2,
            VideoMD5 = 3,
            Text = 16,
            URL = 17

        tags: A list of strings, provided in free format, for the hash, either by the users, NGO or CSP. If multiple
        sources provide tags on a single Hash, a Union set is maintained.  Tags are recorded as case-sensitive.

        hashRegions: A list of location strings indicate where the hash comes from, i.e. ["UK"].

        CSPFeedbacks: This is an array of feedbacks received from zero or more CSPs for the Hash.
    """

    lastModtimestamp: datetime
    hashValue: str
    hashStatus: str
    signalType: str
    caseNumbers: t.Dict[str, str]
    tags: t.List[str]
    hashRegions: t.List[str]
    CSPFeedbacks: t.List[CSPFeedback]

    @classmethod
    def from_dict(cls, d: dict) -> "HashRecord":
        return cls(
            lastModtimestamp=datetime.fromtimestamp(d.get("lastModtimestamp", None)),
            hashValue=d.get("hashValue", None),
            hashStatus=d.get("hashStatus", None),
            signalType=d.get("signalType", None),
            caseNumbers=d.get("caseNumbers", {}),
            tags=d.get("tags", []),
            hashRegions=d.get("hashRegions", []),
            CSPFeedbacks=[CSPFeedback.from_dict(x) for x in d.get("CSPFeedbacks", [])],
        )


@dataclass
class NonThreatExchangeAPIResponse:
    """
    nextSetTimestamp1: Indicates the timestamp to be used for next API call.

    count: Indicates the number of records returned by this query.

    hasMoreRecords: If the property value is set to “true”, then there are additional records available,
    beyond what has been returned.  This usually occurs when the total number of records meeting the specified
    criteria in the API call, since for each call, the maximum number of records returned is limited to the pageSize.

    nextPageToken: specifies the continuation of the previous call to this method,
    where only a subset of records were retrieved. If the token is provided, then the next set of records will
    continue where it had left of in the previous call and the next batch is returned.
    The value is provided as a part of the result set for this call, if there are additional records to be retrieved.
    """

    count: int
    nextSetTimestamp: int
    hasMoreRecords: bool
    nextPageToken: t.Optional[str]
    hashRecords: t.List[HashRecord]

    @classmethod
    def from_dict(cls, d: dict) -> "NonThreatExchangeAPIResponse":
        return cls(
            count=d.get("count", None),
            nextSetTimestamp=d.get("nextSetTimestamp", None),
            hasMoreRecords=d.get("hasMoreRecords", None),
            nextPageToken=d.get("nextPageToken", None),
            hashRecords=[HashRecord.from_dict(x) for x in d.get("hashRecords", [])],
        )
