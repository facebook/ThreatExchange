#! /usr/bin/env python3
# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved

"""
Helper script for a developer to get an API token from cognito based on args
See 
https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-authentication-flow.html#amazon-cognito-user-pools-admin-authentication-flow

Sample Usage (manually editing file):
```
# If you elect to set values in the file
$ export HMA_TMP_TOKEN=$(./scripts/get_auth_token) 
$ export HMA_REFRESH_TOKEN=$(./scripts/get_auth_token --refresh_token) 
```

Sample Usage 
```
# First time to create prefixTestUser (by first deleting the old one if needed)
$ export HMA_TMP_TOKEN=$(./scripts/get_auth_token --pwd 'Example$Passw0rd' --delete_and_create_user --email 'example@org.com') 

# Once the user exists 
$ export HMA_TMP_TOKEN=$(./scripts/get_auth_token --pwd 'Example$Passw0rd') 
$ export HMA_REFRESH_TOKEN=$(./scripts/get_auth_token --pwd 'Example$Passw0rd' --refresh_token) 
```
"""

import os
import argparse
import boto3
from botocore.exceptions import ClientError

from hma_script_utils import (
    get_token,
    create_user,
    delete_user,
    get_terraform_outputs,
    get_default_user_name,
)

if __name__ == "__main__":

    USER = ""
    PWD = ""
    EMAIL = ""

    parser = argparse.ArgumentParser(
        description="Request an access token for various test scripts of the API. Rquires AWS account credentials be present locally. Additionally the UserPoolId must allow 'ADMIN_USER_PASSWORD_AUTH'"
    )
    parser.add_argument(
        "--username",
        help="username of user in pool",
        default=USER,
    )
    parser.add_argument(
        "--pwd",
        help="password of user in pool (see user pool for requirements)",
        default=PWD,
    )
    parser.add_argument(
        "--email",
        help="email of user in pool (required for delete_and_create_user)",
        default=EMAIL,
    )
    parser.add_argument(
        "--delete_and_create_user",
        action="store_true",
        help="When generating the token attempt to delete and create the user specified first.",
    )
    parser.add_argument(
        "--refresh_token",
        action="store_true",
        help="Instead of the AccessToken return the RefreshToken.",
    )

    args = parser.parse_args()

    tf_outputs = get_terraform_outputs()

    pool_id = tf_outputs["cognito_user_pool_id"]["value"]
    client_id = tf_outputs["cognito_user_pool_client_id"]["value"]

    user = args.username
    if not user:
        user = get_default_user_name(tf_outputs["prefix"]["value"])

    if not args.pwd:
        print(
            'PWD is required. It can be set in the script itself (PWD="<password>") or via --pwd "<password>"'
        )
        parser.print_usage()
        exit()

    if args.delete_and_create_user:
        if not args.email:
            print(
                'EMAIL is required for delete_and_create_user. It can be set in the script itself (EMAIL="<valid-email>") or via --email "<valid-email>"'
            )
            parser.print_usage()
            exit()
        delete_user(user, args.pwd, pool_id, client_id)
        create_user(user, args.email, args.pwd, pool_id, client_id)

    resp = get_token(user, args.pwd, pool_id, client_id)

    if args.refresh_token:
        print(resp["AuthenticationResult"]["RefreshToken"])
    else:
        print(resp["AuthenticationResult"]["AccessToken"])
