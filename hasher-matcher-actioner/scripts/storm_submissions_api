#! /usr/bin/env python3
# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved

"""
Storms the submissions API for a running HMA instance with images.

Try to resist the urge to add any hmalib dependencies here. This script can be
run on a server which does not have hmalib.

Sample Usage:
```
$ ./storm_submissions_api https://m....f.execute-api.us-east-1.amazonaws.com/ ../copydays-extended/200100.jpg 100
```

TODO:
[x] Make a single successful request with a stolen JWT
[x] Make threadpooled requests
[x] Simple Stats for the submission API calls
[ ] Get JWT without stealing from browser/postman
"""

import os
import base64
import argparse
import typing as t
import json
import uuid
import datetime
import requests
from urllib import request
import concurrent.futures
from time import perf_counter

from script_utils import HasherMatcherActionerAPI

# Token can be found using Postman or with developer credentials using script/get_auth_token
TOKEN = ""

# "/" does not work with react router preventing the content submission details from rendering.
# However it can be used here for easier clean up between storms that do not need the UI.
ID_SEPARATOR = "-"


def _send_single_submission_url(
    api: HasherMatcherActionerAPI, filepath: str, additional_fields: t.List[str]
) -> int:
    """
    Submit a single file by requesting a presigned url and return the time it took in ms.
    """
    file_name = os.path.split(filepath)[-1]
    content_id = f"storm_url{ID_SEPARATOR}{datetime.date.today().isoformat()}{ID_SEPARATOR}{str(uuid.uuid4())}-{file_name}"

    start_time = perf_counter()

    with open(filepath, "rb") as file:
        api.send_single_submission_url(
            content_id,
            file,
            additional_fields,
        )

    # convert seconds to miliseconds.
    return int((perf_counter() - start_time) * 1000)


def _send_single_submission_b64(
    api: HasherMatcherActionerAPI, filepath: str, additional_fields: t.List[str]
) -> int:
    """
    Submit a single file and return the time it took in ms.
    """
    file_name = os.path.split(filepath)[-1]
    content_id = f"storm{ID_SEPARATOR}{datetime.date.today().isoformat()}{ID_SEPARATOR}{str(uuid.uuid4())}-{file_name}"

    start_time = perf_counter()

    with open(filepath, "rb") as file:
        api.send_single_submission_b64(
            content_id,
            file,
            additional_fields,
        )

    # convert seconds to miliseconds.
    return int((perf_counter() - start_time) * 1000)


def unleash_storm(
    api_url: str,
    filepath: str,
    msg_count: int,
    token: str,
    url_mode: bool,
):
    sent_message_count = 0
    jobs = []

    execution_times = []

    send_single_submission_func = _send_single_submission_b64
    if url_mode:
        send_single_submission_func = _send_single_submission_url

    api = HasherMatcherActionerAPI(api_url, token)

    with concurrent.futures.ThreadPoolExecutor(max_workers=50) as executor:
        while sent_message_count < msg_count:
            jobs.append(
                executor.submit(
                    send_single_submission_func,
                    api,
                    filepath,
                    [],
                )
            )

            sent_message_count += 1

        for i, completed_future in enumerate(concurrent.futures.as_completed(jobs)):
            execution_times.append(completed_future.result())
            # Report progress
            print(f"{i} of {msg_count} sent!", end="\r")

    print(f"Sent all {msg_count} submissions.")

    # Compute some beginner stats.
    execution_times = sorted(execution_times)
    print(
        f"""Percentiles in ms:
  p75: {execution_times[int(len(execution_times)*0.75)]}
  p95: {execution_times[int(len(execution_times)*0.95)]}
  p99: {execution_times[int(len(execution_times)*0.99)]}
    """
    )


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Storm the submisisons API with photo uploads. Will trigger lambdas and cost some $$"
    )
    parser.add_argument(
        "api_url",
        help="HMA API URL. Can be obtained by using terraform outputs. Look for 'api_url'",
    )
    parser.add_argument("file", help="The photo to upload.")
    parser.add_argument(
        "count",
        type=int,
        help="Approximately how many times do we want to send this photo?",
    )
    parser.add_argument(
        "--token",
        help="token required to access the API",
        default=TOKEN,
    )
    parser.add_argument(
        "--url_mode",
        action="store_true",
        help="Submit using presign putObject urls instead of base64 encoding json",
    )

    args = parser.parse_args()
    unleash_storm(args.api_url, args.file, args.count, args.token, args.url_mode)
