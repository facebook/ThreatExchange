#! /usr/bin/env python3
# Copyright (c) Meta Platforms, Inc. and affiliates.

"""
For multi-part Pull Requests, generates basic information in markdown.

Identifies commits between current branch and main, for each, outputs.

<h3> Link, Commit Message

Usage:
$ ./scripts/multi_part_pull_request_template --pull-request <pr-number-after-creating-pr>
"""

import argparse
import subprocess


def build_template(pr_number):
    GIT_LOG_COMMAND = (
        "git log $(git rev-parse --abbrev-ref HEAD) ^main --pretty=oneline"
    )
    output = subprocess.run(GIT_LOG_COMMAND, shell=True, capture_output=True).stdout

    for line in reversed(output.decode("utf-8").split("\n")):
        if not line.strip():
            # if line is empty, ignore
            continue

        splits = line.split(maxsplit=1)

        sha = splits[0]
        message = splits[1]

        gh_link = (
            f"https://github.com/facebook/ThreatExchange/pull/{pr_number}/commits/{sha}"
        )
        print("".join(["### ", f"[`{sha[:8]}`]", f"({gh_link})", " ", message]))

        commit_message_command = (
            f"git rev-list --format=%B --max-count=1 {sha} | tail +2"
        )
        commit_message = subprocess.run(
            commit_message_command, shell=True, capture_output=True
        ).stdout
        print(" ".join(commit_message.decode("utf-8").split("\n")[2:]))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "--pull-request",
        required=True,
        help="The number of the pull request. Create a PR, you will get a number like PR123, only use 123",
    )

    args = parser.parse_args()
    pr_number = args.pull_request

    build_template(pr_number)
