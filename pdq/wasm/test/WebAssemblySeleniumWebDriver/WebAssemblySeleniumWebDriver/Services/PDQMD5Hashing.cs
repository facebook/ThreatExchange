using OpenQA.Selenium;

namespace WebAssemblySeleniumWebDriver.Services {
    public class PDQMD5Hashing {
        /// <summary>
        /// This method is used for passing the filenames whose PDQ/MD5 hash needs to be generated by reading the information from the CSV file.
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="csvFilePath"></param>
        /// <param name="siteUrl"></param>
        public static void GetHash(IWebDriver driver,string csvFilePath,string siteUrl) {

            if (String.IsNullOrWhiteSpace(csvFilePath) || String.IsNullOrWhiteSpace(siteUrl)) {
                Console.WriteLine("Some of the required parameters of GetHash method are missing");
                return;
            }

            try {
                driver.Navigate().GoToUrl(siteUrl);
                // Verify if a proper csv filepath which contains the file with hash information is passed.
                if (!File.Exists(csvFilePath)) {
                    Console.WriteLine($"{csvFilePath} path doesn't exist in the system. Please pass in a valid csv file path.");
                    return;
                }

                // Added a forceful delay of 10 seconds to avoid errors .
                Thread.Sleep(10000);

                StreamReader reader = new StreamReader(csvFilePath);
                string? line = String.Empty;
                string[] columns = new string[2];
                String filePath = String.Empty;
                reader.ReadLine(); // skip first

                int csvFileLineCount = 0;
                int filesSentForProcessing = 0;

                Dictionary<string,string> fileInfo = new Dictionary<string,string>();

                while ((line = reader.ReadLine()) != null) {
                    columns = line.Split(',');
                    csvFileLineCount++;

                    if (columns.Length < 2) {
                        Console.WriteLine($"Please verify all the required details are entered for item no {csvFileLineCount} in {csvFilePath}.");
                        continue;
                    }

                    filePath = columns[0];

                    // Check if the file path specified is absolute path , if not get the relative path specified in the file with respect to the current working directory.
                    if (!Path.IsPathRooted(filePath)) {
                        filePath = Path.GetFullPath(Path.Combine(new DirectoryInfo(Environment.CurrentDirectory).FullName ?? String.Empty,filePath));
                    }

                    if (!File.Exists(filePath)) {
                        Console.WriteLine($"{filePath} filepath doesn't exists in the system.Please specify a valid file path in the csv file.");
                        continue;
                    }

                    var element = driver.FindElement(By.Id("myfile"));
                    element.SendKeys(filePath);

                    filesSentForProcessing++;

                    if (!fileInfo.ContainsKey(Path.GetFileName(filePath))) {
                        fileInfo.Add(Path.GetFileName(filePath),columns[1]);
                    }
                }

                var rows = driver.FindElements(By.CssSelector("tbody tr"));
                int rws_cnt = rows.Count;
                int attempts = 0;
                // Loop through until all the files are processed and the hashes are displayed.
                while((rws_cnt < filesSentForProcessing) && attempts<5000) {
                    rows = driver.FindElements(By.CssSelector("tbody tr"));
                    rws_cnt = rows.Count;
                    attempts++;
                }

                //Iterate rows of table
                for (int i = 0; i < rws_cnt; i++) {
                    var cols = rows[i].FindElements(By.TagName("td"));
                    if (cols.Count > 2) {
                        if (String.Equals(fileInfo[cols[0].Text],cols[1].Text,StringComparison.OrdinalIgnoreCase)) {
                            Console.WriteLine($"Generated Hash for file {cols[0].Text} is {cols[1].Text} and is matching with the Hash value specified in CSV file.");
                        }
                        else {
                            Console.ForegroundColor = ConsoleColor.Red;
                            Console.WriteLine($"Generated Hash for file {cols[0].Text} is {cols[1].Text} and is not matching with the Hash value specified in CSV file.");
                            Console.ResetColor();
                        }
                    }
                    else if (cols.Count == 1) {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine($"{cols[0].Text}.");
                        Console.ResetColor();
                    }
                }
            }
            catch (Exception ex) {
                Console.WriteLine($"Error in GetHash method. Error Message - {ex.Message} , csvFilePath - {csvFilePath}, siteUrl - {siteUrl}");
            }
        }
    }
}
